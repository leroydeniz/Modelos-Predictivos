levels(df)
levels(df$satisfaction)
levels(satisfaction)
class(df)
class(df$satisfaction)
df
df$satisfaction
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=65), tidy=TRUE)
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv("datSat_Air.csv", sep=",", dec='.')
df
df$satisfaction
class(df))
class(df)
class(df$satisfaction)
df$satisfaction_re <- factor(df$satisfaction)
df$satisfaction_re
levels(df$satisfaction_re)
df$satisfaction_re <- as.numeric(factor(df$satisfaction))
levels(df$satisfaction_re)
levels(df$satisfaction_re)
df$satisfaction_re <- factor(df$satisfaction)
levels(df$satisfaction_re)
as.numeric(df$satisfaction_re)
levels(df$satisfaction_re)
df$satisfaction_re <- as.numeric(factor(df$satisfaction_re))
levels(df$satisfaction_re)
as.numeric(df$satisfaction_re)
levels(df$satisfaction_re)
df$satisfaction_re <- factor(df$satisfaction)
levels(df$satisfaction_re)
df["satisfaction_re"][df["satisfaction_re"] == "neutral or dissatisfied"] <- 0
df["satisfaction_re"][df["satisfaction_re"] == "neutral or dissatisfied"] <- "0"
levels(df$satisfaction_re)
df$satisfaction_re[df$satisfaction_re == "neutral or dissatisfied"] <- "0"
df$satisfaction_re[df$satisfaction_re == "neutral or dissatisfied"] <- 0
df$satisfaction_re <- df$satisfaction
levels(df$satisfaction_re)
df$satisfaction_re
df$satisfaction_re[df$satisfaction_re == "neutral or dissatisfied"] <- 0
df$satisfaction_re
df$satisfaction_re[df$satisfaction_re == "satisfied"] <- 0
df$satisfaction_re
df$satisfaction_re <- df$satisfaction
df$satisfaction_re[df$satisfaction_re == "neutral or dissatisfied"] <- 0
df$satisfaction_re[df$satisfaction_re == "satisfied"] <- 1
df$satisfaction_re <- df$satisfaction
df$satisfaction_re[df$satisfaction_re == "neutral or dissatisfied"] <- 0
df$satisfaction_re[df$satisfaction_re == "satisfied"] <- 1
df$satisfaction_re
df$satisfaction_re <- factor(df$satisfaction_re)
df$satisfaction_re
levels(df$satisfaction_re)
class(df$satisfaction_re)
\vspace{0.5cm}
set.seed(24)
df_train <- createDataPartition(df, p=0.80, list = FALSE)
sample_size <- floor(0.8 * nrow(df))
sample_size
set.seed(24)
sample_size <- floor(0.8 * nrow(df))
df_split <- sample(seq_len(nrow(df)), size = sample_size)
df_split
train <- df[df_split,]
test <- df[-df_split,]
train
test
nrow(train)
nrow(test)
La cantidad de filas del data frame de _training_ es de `{r} nrow(training)` y el de testing es de `{r} nrow(testing)`.
logitmodel <- glm(satisfaction_re ~ Gender+Customer_Type+Age+Type_Travel+Class+Distance+Departure_Delay+Arrival_Delay, data=training, family=binomial)
training <- df[df_split,]
testing <- df[-df_split,]
logitmodel <- glm(satisfaction_re ~ Gender+Customer_Type+Age+Type_Travel+Class+Distance+Departure_Delay+Arrival_Delay, data=training, family=binomial)
summary(logitmodel)
vif(logitmodel)
library(car)
vif(logitmodel)
\vspace{0.5cm}
install.packages("pander")
library(pander)
install.packages("epiR")
library(epiR)
install.packages("epitools")
library(epitools)
detach("package:epiR", unload = TRUE)
detach("package:epitools", unload = TRUE)
detach("package:pander", unload = TRUE)
logitmodel <- glm(satisfaction_re ~ Gender+Customer_Type+Age+Type_Travel+Class+Distance, data=training, family=binomial)
ModlgF <- logitmodel
summary(ModlgF)
OR=function(table,col1=1,col2=2){
prop_table=prop.table(table, margin=2)
(prop_table[2*col2]/prop_table[2*col2-1])/(prop_table[2*col1]/prop_table[2*col1-1])
}
OR <- function(table,col1=1,col2=2){
prop_table=prop.table(table, margin=2)
(prop_table[2*col2]/prop_table[2*col2-1])/(prop_table[2*col1]/prop_table[2*col1-1])
}
table_satisfaction_re_gender <- table(df$satisfaction_re, df$Gender)
table_satisfaction_re_gender
table_satisfaction_re_gender <- table(df$satisfaction_re, df$Gender)
OR(table_satisfaction_re_gender)
odds.ratio(table_satisfaction_re_gender)
library(oddsratio)
install.packages("oddsratio")
library(oddsratio)
odds.ratio(table_satisfaction_re_gender)
detach("package:oddsratio", unload = TRUE)
library(epitools)
or_fit <- oddsratio(table_satisfaction_re_gender)
or_fit
or_fit <- oddsratio(table_satisfaction_re_gender)
or_fit
table_satisfaction_re_class <- table(df$satisfaction_re, df$Class)
odds_satisfaction_re_class <- oddsratio(table_satisfaction_re_class)
detach("package:epitools", unload = TRUE)
odds_ratio <- function(table, col1=1, col2=2){
prop_table = prop.table(table, margin=2)
(prop_table[2*col2]/prop_table[2*col2-1])/(prop_table[2*col1]/prop_table[2*col1-1])
}
df$Class <- factor(df$Class)
df$Customer_Type <- factor(df$Customer_Type)
df$Gender <- factor(df$Gender)
table_satisfaction_re_class <- table(df$satisfaction_re, df$Class)
table_satisfaction_re_customer_type <- table(df$satisfaction_re, df$Customer_Type)
table_satisfaction_re_gender <- table(df$satisfaction_re, df$Gender)
table_satisfaction_re_ent <- table(df$satisfaction_re, df$Ent)
ncol(table_satisfaction_re_class)
table_satisfaction_re_class
odds_satisfaction_re_class <- odds_ratio(table_satisfaction_re_class)
odds_satisfaction_re_class
odds_satisfaction_re_class <- c(odds_ratio(table_satisfaction_re_class),odds_ratio(table_satisfaction_re_class, col2=3))
odds_satisfaction_re_class
odds_satisfaction_re_class <- c(odds_ratio(table_satisfaction_re_class),odds_ratio(table_satisfaction_re_class, col2=3),odds_ratio(table_satisfaction_re_class, col2=4))
odds_satisfaction_re_class
odds_satisfaction_re_class <- c(odds_ratio(table_satisfaction_re_class),odds_ratio(table_satisfaction_re_class, col2=3))
levels(df$Class)
df$Class <- factor(df$Class)
# Se ven los diferentes valores que toma la columna factor
levels(df$Class)
# Se crean la tabla.
table_satisfaction_re_class <- table(df$satisfaction_re, df$Class)
# Se aplica la función para cada una de los valores que toma
odds_satisfaction_re_class <- odds_ratio(table_satisfaction_re_class)
# Vector de resultados
cat("Odds-ratio Class: ", odds_satisfaction_re_class)
clear
cls
# Se pasa la columna a factor
df$Class <- factor(df$Class)
# Se ven los diferentes valores que toma la columna factor
levels(df$Class)
# Se crean la tabla.
table_satisfaction_re_class <- table(df$satisfaction_re, df$Class)
# Se aplica la función para cada una de los valores que toma
odds_satisfaction_re_class <- c(odds_ratio(table_satisfaction_re_class),odds_ratio(table_satisfaction_re_class, col2=3))
# Vector de resultados
cat("Odds-ratio Class: ", odds_satisfaction_re_class)
# Se pasa la columna a factor
df$Class <- factor(df$Class)
# Se ven los diferentes valores que toma la columna factor
levels(df$Class)
# Se crean la tabla.
table_satisfaction_re_class <- table(df$satisfaction_re, df$Class)
# Se aplica la función para cada una de los valores que toma
odds_satisfaction_re_class <- c(odds_ratio(table_satisfaction_re_class),odds_ratio(table_satisfaction_re_class, col2=3),odds_ratio(table_satisfaction_re_class, col2=4))
# Vector de resultados
cat("Odds-ratio Class: ", odds_satisfaction_re_class)
odds_satisfaction_re_class <- c(odds_ratio(table_satisfaction_re_class),odds_ratio(table_satisfaction_re_class, col2=3),odds_ratio(table_satisfaction_re_class, col1=2,col2=3))
odds_satisfaction_re_class
library(epitools)
odds_satisfaction_re_class <- oddsratio(table_satisfaction_re_class)
odds_satisfaction_re_class <- oddsratio(table_satisfaction_re_class)
odds_satisfaction_re_class <- oddsratio(table_satisfaction_re_gender)
odds_satisfaction_re_class
odds_satisfaction_re_class <- oddsratio(table_satisfaction_re_class[0])
exp( ModlgF$coefficients[2:4])
exp( ModlgF$coefficients[2:6])
exp( ModlgF$coefficients)
exp( ModlgF$coefficients[2:9])
exp( ModlgF$coefficients[2:8])
t(exp( ModlgF$coefficients[2:8]))
t(t(exp( ModlgF$coefficients[2:8])))
vertical <- function(tbl) {
t(t(tbl))
}
vertical(exp( ModlgF$coefficients[2:8]))
\vspace{0.5cm}
Para la variable _Customer_Type_, cuyo Odd Ratio asciande a los `r exp( ModlgF$coefficients[3])`
exp( ModlgF$coefficients[3])
vertical(exp( coeficients(ModlgF$coefficients)))
vertical(exp( coefficients(ModlgF))
;
vertical(exp( coefficients(ModlgF)))
levens(df$Gender)
df$GEnder. <- factor(df$Gender)
levens(df$Gender)
levels(df$Gender)
model_gender = glm(satisfaction_re~Gender, data=training, family=binomial)
vertical(exp(coefficients(model_gender)))
model_gender = glm(satisfaction_re~Gender, data=training, family=binomial (link=logit))
vertical(exp(coefficients(model_gender)))
summary(model_gender)
model_gender = glm(satisfaction_re~factor(Gender), data=training, family=binomial)
vertical(exp(coefficients(model_gender)))
model_gender = glm(satisfaction_re~factor(Gender), data=training, family=binomial (link=logit))
vertical(exp(coefficients(model_gender)))
model_gender = glm(satisfaction_re~ factor(Gender), data=training, family=binomial (link=logit))
vertical(exp(coefficients(model_gender)))
model_gender = glm(satisfaction_re~ factor(Gender), data=training, family=binomial (link=logit))
vertical(exp(coefficients(model_gender)))
model_gender = glm(satisfaction_re~ df$Gender, data=training, family=binomial (link=logit))
model_gender = glm(satisfaction_re~Gender, data=training, family=binomial (link=logit))
vertical(exp(coefficients(model_gender)))
model_gender = glm(formula=satisfaction_re~Gender, data=training, family=binomial (link=logit))
vertical(exp(coefficients(model_gender)))
levens(df$Class)
levels(df$Class)
detach("package:epitools", unload = TRUE)
predicted_value <- predict(ModlgF,newdata = testing,type = "response")
predicted_value
pred <- predict(ModlgF, newdata = testing, type='response')
glm.pred <- ifelse(pred > 0.5, "1", "1")
glm.pred
performance_data<-data.frame(observed=df$satisfaction_re,predicted= glm.pred)
performance_data<-data.frame(observed=testing$satisfaction_re,predicted= glm.pred)
performance_data
performance_data<-data.frame(observed=testing$satisfaction_re,predicted= glm.pred)
positive <- sum(performance_data$observed=="1")
negative <- sum(performance_data$observed=="0")
predicted_positive <- sum(performance_data$predicted=="1")
predicted_negative <- sum(performance_data$predicted=="0")
total <- nrow(performance_data)
data.frame(positive, negative,predicted_positive,predicted_negative)
pred <- predict(ModlgF, newdata = testing, type='response')
glm.pred <- ifelse(pred < 0.5, "0", "1")
performance_data<-data.frame(observed=testing$satisfaction_re,predicted= glm.pred)
positive <- sum(performance_data$observed=="1")
negative <- sum(performance_data$observed=="0")
predicted_positive <- sum(performance_data$predicted=="1")
predicted_negative <- sum(performance_data$predicted=="0")
total <- nrow(performance_data)
data.frame(positive, negative,predicted_positive,predicted_negative)
tp<-sum(performance_data$observed=="1" & performance_data$predicted=="1")
tn<-sum(performance_data$observed=="0" & performance_data$predicted=="0")
fp<-sum(performance_data$observed=="0" & performance_data$predicted=="1")
fn<-sum(performance_data$observed=="1" & performance_data$predicted=="0")
matriz_confusion <- data.frame(tp,tn,fp,fn)
matriz_confusion
real_predicted_data <- data.frame(observed=testing$satisfaction_re,predicted= glm.pred)
positive <- sum(real_predicted_data$observed=="1")
negative <- sum(real_predicted_data$observed=="0")
predicted_positive <- sum(real_predicted_data$predicted=="1")
predicted_negative <- sum(real_predicted_data$predicted=="0")
total <- nrow(real_predicted_data)
# Dataframe con los valores totales de observaciones según su valor real y el predicho
totales_reales <- data.frame(positive, negative,predicted_positive,predicted_negative)
totales_reales
tp<-sum(real_predicted_data$observed=="1" & real_predicted_data$predicted=="1")
tn<-sum(real_predicted_data$observed=="0" & real_predicted_data$predicted=="0")
fp<-sum(real_predicted_data$observed=="0" & real_predicted_data$predicted=="1")
fn<-sum(real_predicted_data$observed=="1" & real_predicted_data$predicted=="0")
matriz_confusion <- data.frame(tp,tn,fp,fn)
matriz_confusion
df[3]
df[[3]
]
View(df)
df[3,]
df[2,]
df[4,]
df[3,]
pred_2_5 <- predict(ModlgF, newdata = df[3,], type='response')
pred_2_5
ModlgF
sapply(ModlgF)
apply(ModlgF)
\vspace{0.5cm}
anova(ModlgF,test="Chisq")
install.packages("pROC")
\vspace{0.5cm}
prob <- predict(ModlgF, testing, type="response")
r <- roc(testing$satisfaction_re, prob, data=testing)
prob <- predict(ModlgF, testing, type="response")
r <- roc(testing$satisfaction_re, prob, data=testing)
library(pROC)
prob <- predict(ModlgF, testing, type="response")
r <- roc(testing$satisfaction_re, prob, data=testing)
plot(r)
auc(r)
